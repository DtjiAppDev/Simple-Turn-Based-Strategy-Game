"""
This file contains code for creating a simple turn based strategy game using Python programming language.
All names of the heroes are randomly generated by the random generator in
https://www.fantasynamegenerators.com/legendary-creature-names.php.
Author: CreativeCloudAppDev2020
"""

# Importing necessary libraries

import sys
import random
import copy
from mpmath import *
from functools import reduce

mp.pretty = True


# Creating necessary classes


class Hero:
    """
    This class contains attributes of a hero in this game.
    """

    def __init__(self, name, max_hp, attack_power, defense):
        # type: (str, mpf, mpf, mpf) -> None
        self.name: str = name
        self.curr_hp: mpf = max_hp
        self.max_hp: mpf = max_hp
        self.attack_power: mpf = attack_power
        self.defense: mpf = defense
        self.crit_rate: float = 0.5
        self.crit_damage: float = 2
        self.is_alive: bool = self.get_is_alive()

    def __str__(self):
        # type: () -> str
        res: str = ""  # initial value
        res += "Name: " + str(self.name) + "\n"
        res += "HP: " + str(self.curr_hp) + "/" + str(self.max_hp) + "\n"
        res += "Attack power: " + str(self.attack_power) + "\n"
        res += "Defense: " + str(self.defense) + "\n"
        res += "Crit Rate: " + str(self.crit_rate * 100) + "%\n"
        res += "Crit Damage: " + str(self.crit_damage * 100) + "%\n"
        res += "Is this hero alive? " + str(self.is_alive) + "\n"
        return res

    def get_is_alive(self):
        # type: () -> bool
        self.is_alive = self.curr_hp > 0
        return self.is_alive

    def attack(self, other):
        # type: (Hero) -> None
        is_crit: bool = random.random() <= self.crit_rate
        raw_damage: mpf = self.attack_power * mpf(str(self.crit_damage)) - other.defense if is_crit else \
            self.attack_power - other.defense
        damage: mpf = raw_damage if raw_damage > 0 else 0
        other.curr_hp -= damage
        print(str(self.name) + " inflicted " + str(damage) + " damage on " + str(other.name) + ".\n")
        if not other.get_is_alive():
            print(str(self.name) + " defeated " + str(other.name) + ".\n")

    def clone(self):
        # type: () -> Hero
        return copy.deepcopy(self)


class Team:
    """
    This class contains attributes of a team brought to battles.
    """

    MAX_HEROES: int = 5

    def __init__(self):
        # type: () -> None
        self.__heroes: list = []  # initial value

    def __str__(self):
        # type: () -> str
        res: str = ""  # initial value
        res += "Below is a list of heroes in this team:\n"
        for hero in self.__heroes:
            res += str(hero) + "\n"

        return res

    def add_hero(self, hero):
        # type: (Hero) -> bool
        if len(self.__heroes) < self.MAX_HEROES:
            self.__heroes.append(hero)
            return True
        return False

    def all_heroes_died(self):
        # type: () -> bool
        for hero in self.__heroes:
            if hero.get_is_alive():
                return False

        return True

    def remove_hero(self, hero):
        # type: (Hero) -> bool
        if hero in self.__heroes:
            self.__heroes.remove(hero)
            return True
        return False

    def get_heroes(self):
        # type: () -> list
        return self.__heroes

    def clone(self):
        # type: () -> Team
        return copy.deepcopy(self)


def main():
    """
    This main function is used to run the game.
    :return: None
    """

    # Initialising a list of potential heroes

    potential_heroes: list = [
        Hero("Thidse", mpf("5e4"), mpf("4e3"), mpf("2e3")),
        Hero("Uesura", mpf("5.2e4"), mpf("4.4e3"), mpf("1.7e3")),
        Hero("Tarosccat", mpf("4.8e4"), mpf("4.2e3"), mpf("2.4e3")),
        Hero("Silsai", mpf("4.6e4"), mpf("4.7e3"), mpf("1.9e3")),
        Hero("Dhamao", mpf("5.6e4"), mpf("3.8e3"), mpf("2.2e3")),
    ]

    print("Welcome to 'Simple Turn Based Strategy Game' by 'CreativeCloudAppDev2020'.")
    print("In this game, you can choose either single player or multiplayer mode.")
    print("Enter 'Y' for yes.")
    print("Enter anything else for no.")
    continue_ask: str = input("Do you want to continue playing 'Simple Turn Based Strategy Game'? ")
    while continue_ask == "Y":
        print("Enter 'SINGLE PLAYER' to play single player mode.")
        print("Enter 'MULTIPLAYER' for multiplayer mode.")

        # Asking the user to input which game mode he/she wants to play.
        mode: str = input("Which game mode do you want to play? ")
        while mode != "SINGLE PLAYER" and mode != "MULTIPLAYER":
            mode = input("Sorry, invalid input! Which game mode do you want to play? ")

        # If the user wants to play against the CPU
        if mode == "SINGLE PLAYER":
            user_name: str = input("Please enter your name: ")
            cpu_name: str = "CPU"
            user_team: Team = Team()
            cpu_team: Team = Team()

            # Randomly adding heroes to both the user's and CPU's team for battle
            for i in range(5):
                user_team.add_hero(potential_heroes[random.randint(0, len(potential_heroes) - 1)])

            for i in range(5):
                cpu_team.add_hero(potential_heroes[random.randint(0, len(potential_heroes) - 1)])

            print(str(user_name) + "'s team for battle:\n", str(user_team))
            print(str(cpu_name) + "'s team for battle:\n", str(cpu_team))

            # Implementing the battle
            turn: int = 0
            while not user_team.all_heroes_died() and not cpu_team.all_heroes_died():
                # Increment turn
                turn += 1

                # If turn is odd, it is user's turn to attack
                if turn % 2 == 1:
                    print("It is your turn to attack!")
                    whose_turn: Hero = user_team.get_heroes()[(turn // 2) % 5]

                    # Asking the user to choose which hero from CPU's team to be attacked
                    hero_index: int = int(input("Please enter the index of the hero you want to attack (0 - 4): "))
                    while hero_index < 0 or hero_index > 4 or (0 <= hero_index <= 4 and
                                                               not cpu_team.get_heroes()[hero_index].get_is_alive()):
                        hero_index = int(input("Sorry, invalid input! "
                                               "Please enter the index of the hero you want to attack (0 - 4): "))

                    target_hero: Hero = cpu_team.get_heroes()[hero_index]
                    whose_turn.attack(target_hero)

                # CPU's turn to attack
                else:
                    print("It is CPU's turn to attack!")
                    whose_turn: Hero = cpu_team.get_heroes()[(turn // 2) % 5]
                    hero_index: int = random.randint(0, 4)
                    while not user_team.get_heroes()[hero_index].get_is_alive():
                        hero_index = random.randint(0, 4)

                    target_hero: Hero = user_team.get_heroes()[hero_index]
                    whose_turn.attack(target_hero)

            # Determining the winner of the battle
            if user_team.all_heroes_died():
                print(str(user_name) + " loses! CPU wins!")
            elif cpu_team.all_heroes_died():
                print(str(user_name) + " wins!")

        # Else if the user wants to play with another player.
        elif mode == "MULTIPLAYER":
            player_one_name: str = input("Please enter first player's name: ")
            player_two_name: str = input("Please enter second player's name: ")
            player_one_team: Team = Team()
            player_two_team: Team = Team()

            # Adding random heroes to both player one's and player two's teams
            for i in range(5):
                player_one_team.add_hero(potential_heroes[random.randint(0, len(potential_heroes) - 1)])

            for i in range(5):
                player_two_team.add_hero(potential_heroes[random.randint(0, len(potential_heroes) - 1)])

            print(str(player_one_name) + "'s team for battle:\n", str(player_one_team))
            print(str(player_two_name) + "'s team for battle:\n", str(player_two_team))

            # Implementing the battle
            turn: int = 0
            while not player_one_team.all_heroes_died() and not player_two_team.all_heroes_died():
                # Incrementing turn
                turn += 1

                # If turn is odd, it is player one's turn to attack
                if turn % 2 == 1:
                    print("It is " + str(player_one_name) + "'s turn to attack!")
                    whose_turn: Hero = player_one_team.get_heroes()[(turn // 2) % 5]

                    # Asking player one to choose which hero from player two's team to be attacked
                    hero_index: int = int(input("Please enter the index of the hero you want to attack (0 - 4): "))
                    while hero_index < 0 or hero_index > 4 or (0 <= hero_index <= 4 and
                                                               not player_two_team.get_heroes()[hero_index].
                                                                       get_is_alive()):
                        hero_index = int(input("Sorry, invalid input! "
                                               "Please enter the index of the hero you want to attack (0 - 4): "))

                    target_hero: Hero = player_two_team.get_heroes()[hero_index]
                    whose_turn.attack(target_hero)
                # Else, it is player two's turn to attack
                else:
                    print("It is " + str(player_two_name) + "'s turn to attack!")
                    whose_turn: Hero = player_two_team.get_heroes()[(turn // 2) % 5]

                    # Asking player two to choose which hero from player one's team to be attacked
                    hero_index: int = int(input("Please enter the index of the hero you want to attack (0 - 4): "))
                    while hero_index < 0 or hero_index > 4 or (0 <= hero_index <= 4 and
                                                               not player_one_team.get_heroes()[hero_index].
                                                                       get_is_alive()):
                        hero_index = int(input("Sorry, invalid input! "
                                               "Please enter the index of the hero you want to attack (0 - 4): "))

                    target_hero: Hero = player_one_team.get_heroes()[hero_index]
                    whose_turn.attack(target_hero)

            # Determining the winner of the battle
            if player_one_team.all_heroes_died():
                print(str(player_two_name) + " wins!")
            elif player_two_team.all_heroes_died():
                print(str(player_one_team) + " wins!")

        # Asking the user whether he/she wants to continue playing the game or not.
        print("Enter 'Y' for yes.")
        print("Enter anything else for no.")
        continue_ask = input("Do you want to continue playing 'Simple Turn Based Strategy Game'? ")

    sys.exit()


if __name__ == '__main__':
    main()
